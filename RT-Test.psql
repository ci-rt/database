--
-- PostgreSQL database dump
--

-- Dumped from database version 9.6.1
-- Dumped by pg_dump version 9.6.1

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

DROP POLICY IF EXISTS jenkins_all ON "ci-rt".minavgmax;
DROP POLICY IF EXISTS jenkins_all ON "ci-rt".histogram;
DROP POLICY IF EXISTS jenkins_all ON "ci-rt".git;
DROP POLICY IF EXISTS jenkins_all ON "ci-rt".cyclictest;
DROP POLICY IF EXISTS jenkins_all ON "ci-rt".compiletest;
DROP POLICY IF EXISTS jenkins_all ON "ci-rt".boottest;
DROP POLICY IF EXISTS jenkins_all ON "ci-rt".cirtbranch;
DROP POLICY IF EXISTS jenkins_all ON "ci-rt".cirtscheduler;
DROP POLICY IF EXISTS consumer_view ON "ci-rt".cirtscheduler;
DROP POLICY IF EXISTS consumer_view ON "ci-rt".histogram;
DROP POLICY IF EXISTS consumer_view ON "ci-rt".git;
DROP POLICY IF EXISTS consumer_view ON "ci-rt".cyclictest;
DROP POLICY IF EXISTS consumer_view ON "ci-rt".compiletest;
DROP POLICY IF EXISTS consumer_view ON "ci-rt".boottest;
ALTER TABLE IF EXISTS ONLY "ci-rt".target DROP CONSTRAINT IF EXISTS target_label_id_fkey;
ALTER TABLE IF EXISTS ONLY "ci-rt".tags DROP CONSTRAINT IF EXISTS tags_git_id_fkey;
ALTER TABLE IF EXISTS ONLY "ci-rt".minavgmax DROP CONSTRAINT IF EXISTS minavgmax_cyclictest_id_fkey;
ALTER TABLE IF EXISTS ONLY "ci-rt".histogram DROP CONSTRAINT IF EXISTS histogram_cyclictest_id_fkey;
ALTER TABLE IF EXISTS ONLY "ci-rt".generictest DROP CONSTRAINT IF EXISTS generictest_boottest_id_fkey;
ALTER TABLE IF EXISTS ONLY "ci-rt".cyclictest DROP CONSTRAINT IF EXISTS cyclictest_boottest_id_fkey;
ALTER TABLE IF EXISTS ONLY "ci-rt".compiletest DROP CONSTRAINT IF EXISTS compiletest_cirtscheduler_id_fkey;
ALTER TABLE IF EXISTS ONLY "ci-rt".cirtscheduler DROP CONSTRAINT IF EXISTS cirtscheduler_commit_fkey;
ALTER TABLE IF EXISTS ONLY "ci-rt".cirtbranch DROP CONSTRAINT IF EXISTS cirtbranch_cirtscheduler_id_fkey;
ALTER TABLE IF EXISTS ONLY "ci-rt".boottest DROP CONSTRAINT IF EXISTS boottest_target_id_fkey;
ALTER TABLE IF EXISTS ONLY "ci-rt".boottest DROP CONSTRAINT IF EXISTS boottest_compiletest_id_fkey;
DROP INDEX IF EXISTS "ci-rt".public_histogram_cyclictest_id1_idx;
DROP INDEX IF EXISTS "ci-rt".public_cyclictest_boottest_id1_idx;
DROP INDEX IF EXISTS "ci-rt".public_compiletest_cirtscheduler_id1_idx;
DROP INDEX IF EXISTS "ci-rt".public_boottest_target_id2_idx;
DROP INDEX IF EXISTS "ci-rt".public_boottest_pass3_idx;
DROP INDEX IF EXISTS "ci-rt".public_boottest_compiletest_id4_idx;
DROP INDEX IF EXISTS "ci-rt".public_boottest_bootdate1_idx;
ALTER TABLE IF EXISTS ONLY "ci-rt".target DROP CONSTRAINT IF EXISTS target_pkey;
ALTER TABLE IF EXISTS ONLY "ci-rt".tags DROP CONSTRAINT IF EXISTS tags_pkey;
ALTER TABLE IF EXISTS ONLY "ci-rt".minavgmax DROP CONSTRAINT IF EXISTS minavgmax_pkey;
ALTER TABLE IF EXISTS ONLY "ci-rt".label DROP CONSTRAINT IF EXISTS label_pkey;
ALTER TABLE IF EXISTS ONLY "ci-rt".histogram DROP CONSTRAINT IF EXISTS histogram_ukey;
ALTER TABLE IF EXISTS ONLY "ci-rt".histogram DROP CONSTRAINT IF EXISTS histogram_pkey;
ALTER TABLE IF EXISTS ONLY "ci-rt".git DROP CONSTRAINT IF EXISTS git_pkey;
ALTER TABLE IF EXISTS ONLY "ci-rt".generictest DROP CONSTRAINT IF EXISTS generictest_pkey;
ALTER TABLE IF EXISTS ONLY "ci-rt".cyclictest DROP CONSTRAINT IF EXISTS cyclictest_pkey;
ALTER TABLE IF EXISTS ONLY "ci-rt".compiletest DROP CONSTRAINT IF EXISTS compiletest_pkey;
ALTER TABLE IF EXISTS ONLY "ci-rt".cirtscheduler DROP CONSTRAINT IF EXISTS cirtscheduler_pkey;
ALTER TABLE IF EXISTS ONLY "ci-rt".cirtbranch DROP CONSTRAINT IF EXISTS cirtbranch_pkey;
ALTER TABLE IF EXISTS ONLY "ci-rt".boottest DROP CONSTRAINT IF EXISTS boottest_pkey;
ALTER TABLE IF EXISTS "ci-rt".target ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS "ci-rt".tags ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS "ci-rt".label ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS "ci-rt".histogram ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS "ci-rt".git ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS "ci-rt".generictest ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS "ci-rt".cyclictest ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS "ci-rt".compiletest ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS "ci-rt".cirtscheduler ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS "ci-rt".boottest ALTER COLUMN id DROP DEFAULT;
DROP VIEW IF EXISTS "ci-rt".targets;
DROP VIEW IF EXISTS "ci-rt".targetboot;
DROP VIEW IF EXISTS "ci-rt".target_tests;
DROP SEQUENCE IF EXISTS "ci-rt".target_id_seq;
DROP SEQUENCE IF EXISTS "ci-rt".tags_id_seq;
DROP VIEW IF EXISTS "ci-rt".overview;
DROP TABLE IF EXISTS "ci-rt".tags;
DROP TABLE IF EXISTS "ci-rt".minavgmax;
DROP SEQUENCE IF EXISTS "ci-rt".label_id_seq;
DROP VIEW IF EXISTS "ci-rt".kbuild;
DROP TABLE IF EXISTS "ci-rt".label;
DROP VIEW IF EXISTS "ci-rt".histogram_view;
DROP SEQUENCE IF EXISTS "ci-rt".histogram_id_seq;
DROP TABLE IF EXISTS "ci-rt".histogram;
DROP SEQUENCE IF EXISTS "ci-rt".hibernate_sequence;
DROP VIEW IF EXISTS "ci-rt".git_view;
DROP SEQUENCE IF EXISTS "ci-rt".git_id_seq;
DROP TABLE IF EXISTS "ci-rt".git;
DROP SEQUENCE IF EXISTS "ci-rt".generictest_id_seq;
DROP TABLE IF EXISTS "ci-rt".generictest;
DROP VIEW IF EXISTS "ci-rt".donut;
DROP VIEW IF EXISTS "ci-rt".detail;
DROP VIEW IF EXISTS "ci-rt".cyclictest_view;
DROP SEQUENCE IF EXISTS "ci-rt".cyclictest_id_seq;
DROP VIEW IF EXISTS "ci-rt".cyc_target;
DROP TABLE IF EXISTS "ci-rt".target;
DROP TABLE IF EXISTS "ci-rt".cyclictest;
DROP SEQUENCE IF EXISTS "ci-rt".compiletest_id_seq;
DROP SEQUENCE IF EXISTS "ci-rt".cirtscheduler_id_seq;
DROP TABLE IF EXISTS "ci-rt".cirtscheduler;
DROP TABLE IF EXISTS "ci-rt".cirtbranch;
DROP VIEW IF EXISTS "ci-rt".build;
DROP TABLE IF EXISTS "ci-rt".compiletest;
DROP VIEW IF EXISTS "ci-rt".boottest_view;
DROP SEQUENCE IF EXISTS "ci-rt".boottest_id_seq;
DROP TABLE IF EXISTS "ci-rt".boottest;
DROP EXTENSION IF EXISTS plpgsql;
DROP SCHEMA IF EXISTS "ci-rt";
--
-- Name: "ci-rt"; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA "ci-rt";


ALTER SCHEMA "ci-rt" OWNER TO postgres;

--
-- Name: SCHEMA "ci-rt"; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA "ci-rt" IS 'CI-RT standard schema';


--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: boottest; Type: TABLE; Schema: "ci-rt"; Owner: postgres
--

CREATE TABLE "ci-rt".boottest (
    id integer NOT NULL,
    cmdline character varying(1024) NOT NULL,
    pass boolean NOT NULL,
    compiletest_id integer NOT NULL,
    target_id integer NOT NULL,
    bootdate timestamp without time zone NOT NULL,
    owner text DEFAULT 'consumer'::text NOT NULL,
    notes character varying(1024),
    bootlog bytea NOT NULL
);


ALTER TABLE "ci-rt".boottest OWNER TO postgres;

--
-- Name: boottest_id_seq; Type: SEQUENCE; Schema: "ci-rt"; Owner: postgres
--

CREATE SEQUENCE "ci-rt".boottest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "ci-rt".boottest_id_seq OWNER TO postgres;

--
-- Name: boottest_id_seq; Type: SEQUENCE OWNED BY; Schema: "ci-rt"; Owner: postgres
--

ALTER SEQUENCE "ci-rt".boottest_id_seq OWNED BY "ci-rt".boottest.id;


--
-- Name: boottest_view; Type: VIEW; Schema: "ci-rt"; Owner: consumer
--

CREATE VIEW "ci-rt".boottest_view AS
 SELECT b.id,
    b.target_id,
    b.cmdline,
    b.pass
   FROM "ci-rt".boottest b;


ALTER TABLE "ci-rt".boottest_view OWNER TO consumer;

--
-- Name: compiletest; Type: TABLE; Schema: "ci-rt"; Owner: postgres
--

CREATE TABLE "ci-rt".compiletest (
    id integer NOT NULL,
    custom_commit character varying(40),
    defconfig bytea NOT NULL,
    "overlay" character varying(45) NOT NULL,
    pass boolean NOT NULL,
    cirtscheduler_id integer NOT NULL,
    configname character varying(80) NOT NULL,
    arch character varying(20) NOT NULL,
    buildcmd bytea NOT NULL,
    owner text DEFAULT 'consumer'::text NOT NULL,
    notes character varying(1024),
    buildlog bytea NOT NULL
);


ALTER TABLE "ci-rt".compiletest OWNER TO postgres;

--
-- Name: build; Type: VIEW; Schema: "ci-rt"; Owner: consumer
--

CREATE VIEW "ci-rt".build AS
 SELECT c.id,
    c."overlay",
    c.defconfig,
    c.pass,
    c.configname AS config,
    c.buildcmd AS testscript
   FROM "ci-rt".compiletest c;


ALTER TABLE "ci-rt".build OWNER TO consumer;

--
-- Name: cirtbranch; Type: TABLE; Schema: "ci-rt"; Owner: postgres
--

CREATE TABLE "ci-rt".cirtbranch (
    id integer NOT NULL,
    testbranch character varying(80) NOT NULL,
    commit character varying(40) NOT NULL,
    cirtscheduler_id integer NOT NULL,
    owner text DEFAULT 'consumer'::text NOT NULL
);


ALTER TABLE "ci-rt".cirtbranch OWNER TO postgres;

--
-- Name: cirtscheduler; Type: TABLE; Schema: "ci-rt"; Owner: postgres
--

CREATE TABLE "ci-rt".cirtscheduler (
    id integer NOT NULL,
    branch character varying(80) NOT NULL,
    "timestamp" timestamp without time zone NOT NULL,
    tags_id integer NOT NULL,
    pass boolean NOT NULL,
    owner text DEFAULT 'consumer'::text NOT NULL,
    notes character varying(1024),
    processing boolean DEFAULT true NOT NULL,
    patches bytea
);


ALTER TABLE "ci-rt".cirtscheduler OWNER TO postgres;

--
-- Name: cirtscheduler_id_seq; Type: SEQUENCE; Schema: "ci-rt"; Owner: postgres
--

CREATE SEQUENCE "ci-rt".cirtscheduler_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "ci-rt".cirtscheduler_id_seq OWNER TO postgres;

--
-- Name: cirtscheduler_id_seq; Type: SEQUENCE OWNED BY; Schema: "ci-rt"; Owner: postgres
--

ALTER SEQUENCE "ci-rt".cirtscheduler_id_seq OWNED BY "ci-rt".cirtscheduler.id;


--
-- Name: compiletest_id_seq; Type: SEQUENCE; Schema: "ci-rt"; Owner: postgres
--

CREATE SEQUENCE "ci-rt".compiletest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "ci-rt".compiletest_id_seq OWNER TO postgres;

--
-- Name: compiletest_id_seq; Type: SEQUENCE OWNED BY; Schema: "ci-rt"; Owner: postgres
--

ALTER SEQUENCE "ci-rt".compiletest_id_seq OWNED BY "ci-rt".compiletest.id;


--
-- Name: cyclictest; Type: TABLE; Schema: "ci-rt"; Owner: postgres
--

CREATE TABLE "ci-rt".cyclictest (
    id integer NOT NULL,
    description character varying(80) NOT NULL,
    duration integer NOT NULL,
    "interval" integer NOT NULL,
    min integer NOT NULL,
    avg integer NOT NULL,
    max integer NOT NULL,
    boottest_id integer NOT NULL,
    pass boolean NOT NULL,
    threshold integer NOT NULL,
    testscript bytea NOT NULL,
    owner text DEFAULT 'consumer'::text NOT NULL,
    notes character varying(1024),
    testlog bytea NOT NULL
);


ALTER TABLE "ci-rt".cyclictest OWNER TO postgres;

--
-- Name: target; Type: TABLE; Schema: "ci-rt"; Owner: postgres
--

CREATE TABLE "ci-rt".target (
    id integer NOT NULL,
    hostname character varying(80) NOT NULL,
    shortdesc character varying(80) NOT NULL,
    description bytea NOT NULL,
    label_id integer NOT NULL,
    notes character varying(1024),
    owner text DEFAULT 'consumer'::text NOT NULL
);


ALTER TABLE "ci-rt".target OWNER TO postgres;

--
-- Name: cyc_target; Type: VIEW; Schema: "ci-rt"; Owner: consumer
--

CREATE VIEW "ci-rt".cyc_target AS
 SELECT t.shortdesc,
    c.id AS c_id
   FROM (("ci-rt".cyclictest c
     JOIN "ci-rt".boottest bt ON ((c.boottest_id = bt.id)))
     JOIN "ci-rt".target t ON ((bt.target_id = t.id)));


ALTER TABLE "ci-rt".cyc_target OWNER TO consumer;

--
-- Name: cyclictest_id_seq; Type: SEQUENCE; Schema: "ci-rt"; Owner: postgres
--

CREATE SEQUENCE "ci-rt".cyclictest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "ci-rt".cyclictest_id_seq OWNER TO postgres;

--
-- Name: cyclictest_id_seq; Type: SEQUENCE OWNED BY; Schema: "ci-rt"; Owner: postgres
--

ALTER SEQUENCE "ci-rt".cyclictest_id_seq OWNED BY "ci-rt".cyclictest.id;


--
-- Name: cyclictest_view; Type: VIEW; Schema: "ci-rt"; Owner: consumer
--

CREATE VIEW "ci-rt".cyclictest_view AS
 SELECT c.id,
    c.description AS load,
    c.duration,
    c."interval",
    c.min,
    c.avg,
    c.max,
    c.boottest_id,
    c.pass,
    c.threshold,
    c.testscript
   FROM "ci-rt".cyclictest c;


ALTER TABLE "ci-rt".cyclictest_view OWNER TO consumer;

--
-- Name: detail; Type: VIEW; Schema: "ci-rt"; Owner: consumer
--

CREATE VIEW "ci-rt".detail AS
 SELECT s.id AS kernelbuild,
    b.configname AS config,
    b."overlay",
    b.pass AS b_pass,
    bt.pass AS bt_pass,
    bt.pass AS cyc_pass,
    b.id AS b_id,
    bt.id AS bt_id,
    c.id AS c_id,
    b.arch
   FROM ((("ci-rt".cirtscheduler s
     LEFT JOIN "ci-rt".compiletest b ON ((s.id = b.cirtscheduler_id)))
     LEFT JOIN "ci-rt".boottest bt ON ((b.id = bt.compiletest_id)))
     LEFT JOIN "ci-rt".cyclictest c ON ((c.boottest_id = bt.id)));


ALTER TABLE "ci-rt".detail OWNER TO consumer;

--
-- Name: donut; Type: VIEW; Schema: "ci-rt"; Owner: consumer
--

CREATE VIEW "ci-rt".donut AS
 SELECT compiletest.cirtscheduler_id AS kernelbuild_id,
    count(compiletest.pass) AS passed,
    count(compiletest.id) AS count
   FROM "ci-rt".compiletest
  GROUP BY compiletest.cirtscheduler_id
  ORDER BY compiletest.cirtscheduler_id DESC
 LIMIT 10;


ALTER TABLE "ci-rt".donut OWNER TO consumer;

--
-- Name: generictest; Type: TABLE; Schema: ci-rt; Owner: jenkins
--

CREATE TABLE "ci-rt".generictest (
    id integer NOT NULL,
    description character varying(80),
    boottest_id integer,
    pass boolean,
    testscript bytea,
    owner text,
    testlog bytea
);


ALTER TABLE "ci-rt".generictest OWNER TO jenkins;

--
-- Name: generictest_id_seq; Type: SEQUENCE; Schema: ci-rt; Owner: jenkins
--

CREATE SEQUENCE "ci-rt".generictest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "ci-rt".generictest_id_seq OWNER TO jenkins;

--
-- Name: generictest_id_seq; Type: SEQUENCE OWNED BY; Schema: ci-rt; Owner: jenkins
--

ALTER SEQUENCE "ci-rt".generictest_id_seq OWNED BY "ci-rt".generictest.id;


--
-- Name: git; Type: TABLE; Schema: "ci-rt"; Owner: postgres
--

CREATE TABLE "ci-rt".git (
    id integer NOT NULL,
    path character varying(1024) NOT NULL,
    public boolean NOT NULL,
    httprepo text,
    owner text DEFAULT 'consumer'::text NOT NULL
);


ALTER TABLE "ci-rt".git OWNER TO postgres;

--
-- Name: git_id_seq; Type: SEQUENCE; Schema: "ci-rt"; Owner: postgres
--

CREATE SEQUENCE "ci-rt".git_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "ci-rt".git_id_seq OWNER TO postgres;

--
-- Name: git_id_seq; Type: SEQUENCE OWNED BY; Schema: "ci-rt"; Owner: postgres
--

ALTER SEQUENCE "ci-rt".git_id_seq OWNED BY "ci-rt".git.id;


--
-- Name: git_view; Type: VIEW; Schema: "ci-rt"; Owner: consumer
--

CREATE VIEW "ci-rt".git_view AS
 SELECT g.id,
    g.httprepo,
    g.path
   FROM "ci-rt".git g;


ALTER TABLE "ci-rt".git_view OWNER TO consumer;

--
-- Name: hibernate_sequence; Type: SEQUENCE; Schema: "ci-rt"; Owner: postgres
--

CREATE SEQUENCE "ci-rt".hibernate_sequence
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "ci-rt".hibernate_sequence OWNER TO postgres;

--
-- Name: histogram; Type: TABLE; Schema: "ci-rt"; Owner: postgres
--

CREATE TABLE "ci-rt".histogram (
    id integer NOT NULL,
    thread integer NOT NULL,
    latency integer NOT NULL,
    count integer NOT NULL,
    cyclictest_id integer NOT NULL,
    owner text DEFAULT 'consumer'::text NOT NULL
);


ALTER TABLE "ci-rt".histogram OWNER TO postgres;

--
-- Name: histogram_id_seq; Type: SEQUENCE; Schema: "ci-rt"; Owner: postgres
--

CREATE SEQUENCE "ci-rt".histogram_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "ci-rt".histogram_id_seq OWNER TO postgres;

--
-- Name: histogram_id_seq; Type: SEQUENCE OWNED BY; Schema: "ci-rt"; Owner: postgres
--

ALTER SEQUENCE "ci-rt".histogram_id_seq OWNED BY "ci-rt".histogram.id;


--
-- Name: histogram_view; Type: VIEW; Schema: "ci-rt"; Owner: consumer
--

CREATE VIEW "ci-rt".histogram_view AS
 SELECT h.thread AS cpu,
    h.latency,
    h.count,
    h.cyclictest_id
   FROM "ci-rt".histogram h;


ALTER TABLE "ci-rt".histogram_view OWNER TO consumer;

--
-- Name: label; Type: TABLE; Schema: "ci-rt"; Owner: postgres
--

CREATE TABLE "ci-rt".label (
    id integer NOT NULL,
    arch character varying(20) NOT NULL,
    family character varying(20) NOT NULL,
    owner text DEFAULT 'consumer'::text NOT NULL
);


ALTER TABLE "ci-rt".label OWNER TO postgres;

--
-- Name: kbuild; Type: VIEW; Schema: "ci-rt"; Owner: consumer
--

CREATE VIEW "ci-rt".kbuild AS
 SELECT s.id AS kernelbuild,
    b.arch,
    b.configname AS config,
    b."overlay",
    b.pass AS b_pass,
    bt.pass AS bt_pass,
    c.pass AS cyc_pass,
    b.id AS b_id,
    bt.id AS bt_id,
    c.id AS c_id,
    bt.target_id AS t_id,
    concat_ws(' '::text, l.arch, l.family) AS t_label
   FROM ((((("ci-rt".cirtscheduler s
     LEFT JOIN "ci-rt".compiletest b ON ((s.id = b.cirtscheduler_id)))
     LEFT JOIN "ci-rt".boottest bt ON ((b.id = bt.compiletest_id)))
     LEFT JOIN "ci-rt".cyclictest c ON ((c.boottest_id = bt.id)))
     LEFT JOIN "ci-rt".target t ON ((bt.target_id = t.id)))
     LEFT JOIN "ci-rt".label l ON ((t.label_id = l.id)));


ALTER TABLE "ci-rt".kbuild OWNER TO consumer;

--
-- Name: label_id_seq; Type: SEQUENCE; Schema: "ci-rt"; Owner: postgres
--

CREATE SEQUENCE "ci-rt".label_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "ci-rt".label_id_seq OWNER TO postgres;

--
-- Name: label_id_seq; Type: SEQUENCE OWNED BY; Schema: "ci-rt"; Owner: postgres
--

ALTER SEQUENCE "ci-rt".label_id_seq OWNED BY "ci-rt".label.id;


--
-- Name: minavgmax; Type: TABLE; Schema: "ci-rt"; Owner: postgres
--

CREATE TABLE "ci-rt".minavgmax (
    thread integer NOT NULL,
    cyclictest_id integer NOT NULL,
    min integer NOT NULL,
    avg integer NOT NULL,
    max integer NOT NULL,
    owner text DEFAULT 'consumer'::text NOT NULL
);


ALTER TABLE "ci-rt".minavgmax OWNER TO postgres;

--
-- Name: tags; Type: TABLE; Schema: "ci-rt"; Owner: postgres
--

CREATE TABLE "ci-rt".tags (
    id integer NOT NULL,
    git_id integer NOT NULL,
    commit character varying(40) NOT NULL,
    name character varying(80) NOT NULL,
    owner text DEFAULT 'consumer'::text NOT NULL
);


ALTER TABLE "ci-rt".tags OWNER TO postgres;

--
-- Name: overview; Type: VIEW; Schema: "ci-rt"; Owner: consumer
--

CREATE VIEW "ci-rt".overview AS
 SELECT s.id,
    s.branch,
    s."timestamp",
    t.commit,
    t.name,
    s.id AS kernelbuild,
    s.pass,
    t.git_id,
    g.path,
    g.public
   FROM (("ci-rt".cirtscheduler s
     JOIN "ci-rt".tags t ON ((s.tags_id = t.id)))
     JOIN "ci-rt".git g ON ((t.git_id = g.id)))
  WHERE (s.processing = false);


ALTER TABLE "ci-rt".overview OWNER TO consumer;

--
-- Name: tags_id_seq; Type: SEQUENCE; Schema: "ci-rt"; Owner: postgres
--

CREATE SEQUENCE "ci-rt".tags_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "ci-rt".tags_id_seq OWNER TO postgres;

--
-- Name: tags_id_seq; Type: SEQUENCE OWNED BY; Schema: "ci-rt"; Owner: postgres
--

ALTER SEQUENCE "ci-rt".tags_id_seq OWNED BY "ci-rt".tags.id;


--
-- Name: target_id_seq; Type: SEQUENCE; Schema: "ci-rt"; Owner: postgres
--

CREATE SEQUENCE "ci-rt".target_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "ci-rt".target_id_seq OWNER TO postgres;

--
-- Name: target_id_seq; Type: SEQUENCE OWNED BY; Schema: "ci-rt"; Owner: postgres
--

ALTER SEQUENCE "ci-rt".target_id_seq OWNED BY "ci-rt".target.id;


--
-- Name: target_tests; Type: VIEW; Schema: "ci-rt"; Owner: consumer
--

CREATE VIEW "ci-rt".target_tests AS
 SELECT c.id AS c_id,
    s.branch,
    t.name,
    t.commit,
    s."timestamp",
    b.configname AS config,
    b."overlay",
    s.id AS kernelbuild,
    bt.target_id AS t_id,
    c.min AS c_min,
    c.avg AS c_avg,
    c.max AS c_max,
    c.pass
   FROM (((("ci-rt".cirtscheduler s
     JOIN "ci-rt".tags t ON ((s.tags_id = t.id)))
     JOIN "ci-rt".compiletest b ON ((s.id = b.cirtscheduler_id)))
     JOIN "ci-rt".boottest bt ON ((b.id = bt.compiletest_id)))
     JOIN "ci-rt".cyclictest c ON ((c.boottest_id = bt.id)));


ALTER TABLE "ci-rt".target_tests OWNER TO consumer;

--
-- Name: targetboot; Type: VIEW; Schema: "ci-rt"; Owner: consumer
--

CREATE VIEW "ci-rt".targetboot AS
 SELECT b.id,
    b.compiletest_id AS build_id,
    t.shortdesc,
    b.bootdate,
    b.cmdline,
    b.pass
   FROM ("ci-rt".boottest b
     JOIN "ci-rt".target t ON ((b.target_id = t.id)));


ALTER TABLE "ci-rt".targetboot OWNER TO consumer;

--
-- Name: targets; Type: VIEW; Schema: "ci-rt"; Owner: consumer
--

CREATE VIEW "ci-rt".targets AS
 SELECT concat_ws(' '::text, l.arch, l.family) AS label,
    t.shortdesc AS descr,
    t.id AS t_id
   FROM ("ci-rt".target t
     JOIN "ci-rt".label l ON ((t.label_id = l.id)));


ALTER TABLE "ci-rt".targets OWNER TO consumer;

--
-- Name: boottest id; Type: DEFAULT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".boottest ALTER COLUMN id SET DEFAULT nextval('"ci-rt".boottest_id_seq'::regclass);


--
-- Name: cirtscheduler id; Type: DEFAULT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".cirtscheduler ALTER COLUMN id SET DEFAULT nextval('"ci-rt".cirtscheduler_id_seq'::regclass);


--
-- Name: compiletest id; Type: DEFAULT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".compiletest ALTER COLUMN id SET DEFAULT nextval('"ci-rt".compiletest_id_seq'::regclass);


--
-- Name: cyclictest id; Type: DEFAULT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".cyclictest ALTER COLUMN id SET DEFAULT nextval('"ci-rt".cyclictest_id_seq'::regclass);


--
-- Name: generictest id; Type: DEFAULT; Schema: ci-rt; Owner: jenkins
--

ALTER TABLE ONLY "ci-rt".generictest ALTER COLUMN id SET DEFAULT nextval('"ci-rt".generictest_id_seq'::regclass);


--
-- Name: git id; Type: DEFAULT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".git ALTER COLUMN id SET DEFAULT nextval('"ci-rt".git_id_seq'::regclass);


--
-- Name: histogram id; Type: DEFAULT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".histogram ALTER COLUMN id SET DEFAULT nextval('"ci-rt".histogram_id_seq'::regclass);


--
-- Name: label id; Type: DEFAULT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".label ALTER COLUMN id SET DEFAULT nextval('"ci-rt".label_id_seq'::regclass);


--
-- Name: tags id; Type: DEFAULT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".tags ALTER COLUMN id SET DEFAULT nextval('"ci-rt".tags_id_seq'::regclass);


--
-- Name: target id; Type: DEFAULT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".target ALTER COLUMN id SET DEFAULT nextval('"ci-rt".target_id_seq'::regclass);


--
-- Name: boottest boottest_pkey; Type: CONSTRAINT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".boottest
    ADD CONSTRAINT boottest_pkey PRIMARY KEY (id);


--
-- Name: cirtbranch cirtbranch_pkey; Type: CONSTRAINT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".cirtbranch
    ADD CONSTRAINT cirtbranch_pkey PRIMARY KEY (id, testbranch);


--
-- Name: cirtscheduler cirtscheduler_pkey; Type: CONSTRAINT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".cirtscheduler
    ADD CONSTRAINT cirtscheduler_pkey PRIMARY KEY (id);


--
-- Name: compiletest compiletest_pkey; Type: CONSTRAINT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".compiletest
    ADD CONSTRAINT compiletest_pkey PRIMARY KEY (id);


--
-- Name: cyclictest cyclictest_pkey; Type: CONSTRAINT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".cyclictest
    ADD CONSTRAINT cyclictest_pkey PRIMARY KEY (id);


--
-- Name: generictest generictest_pkey; Type: CONSTRAINT; Schema: ci-rt; Owner: jenkins
--

ALTER TABLE ONLY "ci-rt".generictest
    ADD CONSTRAINT generictest_pkey PRIMARY KEY (id);


--
-- Name: git git_pkey; Type: CONSTRAINT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".git
    ADD CONSTRAINT git_pkey PRIMARY KEY (id);


--
-- Name: histogram histogram_pkey; Type: CONSTRAINT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".histogram
    ADD CONSTRAINT histogram_pkey PRIMARY KEY (id);


--
-- Name: histogram histogram_ukey; Type: CONSTRAINT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".histogram
    ADD CONSTRAINT histogram_ukey UNIQUE (thread, latency, cyclictest_id);


--
-- Name: label label_pkey; Type: CONSTRAINT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".label
    ADD CONSTRAINT label_pkey PRIMARY KEY (id);


--
-- Name: minavgmax minavgmax_pkey; Type: CONSTRAINT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".minavgmax
    ADD CONSTRAINT minavgmax_pkey PRIMARY KEY (cyclictest_id, thread);


--
-- Name: tags tags_pkey; Type: CONSTRAINT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".tags
    ADD CONSTRAINT tags_pkey PRIMARY KEY (id);


--
-- Name: target target_pkey; Type: CONSTRAINT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".target
    ADD CONSTRAINT target_pkey PRIMARY KEY (id);


--
-- Name: public_boottest_bootdate1_idx; Type: INDEX; Schema: "ci-rt"; Owner: postgres
--

CREATE UNIQUE INDEX public_boottest_bootdate1_idx ON "ci-rt".boottest USING btree (bootdate, target_id);


--
-- Name: public_boottest_compiletest_id4_idx; Type: INDEX; Schema: "ci-rt"; Owner: postgres
--

CREATE INDEX public_boottest_compiletest_id4_idx ON "ci-rt".boottest USING btree (compiletest_id);


--
-- Name: public_boottest_pass3_idx; Type: INDEX; Schema: "ci-rt"; Owner: postgres
--

CREATE INDEX public_boottest_pass3_idx ON "ci-rt".boottest USING btree (pass);


--
-- Name: public_boottest_target_id2_idx; Type: INDEX; Schema: "ci-rt"; Owner: postgres
--

CREATE INDEX public_boottest_target_id2_idx ON "ci-rt".boottest USING btree (target_id);


--
-- Name: public_compiletest_cirtscheduler_id1_idx; Type: INDEX; Schema: "ci-rt"; Owner: postgres
--

CREATE INDEX public_compiletest_cirtscheduler_id1_idx ON "ci-rt".compiletest USING btree (cirtscheduler_id);


--
-- Name: public_cyclictest_boottest_id1_idx; Type: INDEX; Schema: "ci-rt"; Owner: postgres
--

CREATE INDEX public_cyclictest_boottest_id1_idx ON "ci-rt".cyclictest USING btree (boottest_id);


--
-- Name: public_histogram_cyclictest_id1_idx; Type: INDEX; Schema: "ci-rt"; Owner: postgres
--

CREATE INDEX public_histogram_cyclictest_id1_idx ON "ci-rt".histogram USING btree (cyclictest_id);


--
-- Name: boottest boottest_compiletest_id_fkey; Type: FK CONSTRAINT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".boottest
    ADD CONSTRAINT boottest_compiletest_id_fkey FOREIGN KEY (compiletest_id) REFERENCES "ci-rt".compiletest(id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: boottest boottest_target_id_fkey; Type: FK CONSTRAINT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".boottest
    ADD CONSTRAINT boottest_target_id_fkey FOREIGN KEY (target_id) REFERENCES "ci-rt".target(id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: cirtbranch cirtbranch_cirtscheduler_id_fkey; Type: FK CONSTRAINT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".cirtbranch
    ADD CONSTRAINT cirtbranch_cirtscheduler_id_fkey FOREIGN KEY (cirtscheduler_id) REFERENCES "ci-rt".cirtscheduler(id);


--
-- Name: cirtscheduler cirtscheduler_commit_fkey; Type: FK CONSTRAINT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".cirtscheduler
    ADD CONSTRAINT cirtscheduler_commit_fkey FOREIGN KEY (tags_id) REFERENCES "ci-rt".tags(id);


--
-- Name: compiletest compiletest_cirtscheduler_id_fkey; Type: FK CONSTRAINT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".compiletest
    ADD CONSTRAINT compiletest_cirtscheduler_id_fkey FOREIGN KEY (cirtscheduler_id) REFERENCES "ci-rt".cirtscheduler(id);


--
-- Name: cyclictest cyclictest_boottest_id_fkey; Type: FK CONSTRAINT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".cyclictest
    ADD CONSTRAINT cyclictest_boottest_id_fkey FOREIGN KEY (boottest_id) REFERENCES "ci-rt".boottest(id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: generictest generictest_boottest_id_fkey; Type: FK CONSTRAINT; Schema: ci-rt; Owner: jenkins
--

ALTER TABLE ONLY "ci-rt".generictest
    ADD CONSTRAINT generictest_boottest_id_fkey FOREIGN KEY (boottest_id) REFERENCES "ci-rt".boottest(id);


--
-- Name: histogram histogram_cyclictest_id_fkey; Type: FK CONSTRAINT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".histogram
    ADD CONSTRAINT histogram_cyclictest_id_fkey FOREIGN KEY (cyclictest_id) REFERENCES "ci-rt".cyclictest(id);


--
-- Name: minavgmax minavgmax_cyclictest_id_fkey; Type: FK CONSTRAINT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".minavgmax
    ADD CONSTRAINT minavgmax_cyclictest_id_fkey FOREIGN KEY (cyclictest_id) REFERENCES "ci-rt".cyclictest(id);


--
-- Name: tags tags_git_id_fkey; Type: FK CONSTRAINT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".tags
    ADD CONSTRAINT tags_git_id_fkey FOREIGN KEY (git_id) REFERENCES "ci-rt".git(id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: target target_label_id_fkey; Type: FK CONSTRAINT; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE ONLY "ci-rt".target
    ADD CONSTRAINT target_label_id_fkey FOREIGN KEY (label_id) REFERENCES "ci-rt".label(id) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: boottest; Type: ROW SECURITY; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE "ci-rt".boottest ENABLE ROW LEVEL SECURITY;

--
-- Name: cirtbranch; Type: ROW SECURITY; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE "ci-rt".cirtbranch ENABLE ROW LEVEL SECURITY;

--
-- Name: cirtscheduler; Type: ROW SECURITY; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE "ci-rt".cirtscheduler ENABLE ROW LEVEL SECURITY;

--
-- Name: compiletest; Type: ROW SECURITY; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE "ci-rt".compiletest ENABLE ROW LEVEL SECURITY;

--
-- Name: boottest consumer_view; Type: POLICY; Schema: "ci-rt"; Owner: postgres
--

CREATE POLICY consumer_view ON "ci-rt".boottest FOR SELECT TO consumer USING (((owner = ("current_user"())::text) OR (owner = 'consumer'::text)));


--
-- Name: compiletest consumer_view; Type: POLICY; Schema: "ci-rt"; Owner: postgres
--

CREATE POLICY consumer_view ON "ci-rt".compiletest FOR SELECT TO consumer USING (((owner = ("current_user"())::text) OR (owner = 'consumer'::text)));


--
-- Name: cyclictest consumer_view; Type: POLICY; Schema: "ci-rt"; Owner: postgres
--

CREATE POLICY consumer_view ON "ci-rt".cyclictest FOR SELECT TO consumer USING (((owner = ("current_user"())::text) OR (owner = 'consumer'::text)));


--
-- Name: git consumer_view; Type: POLICY; Schema: "ci-rt"; Owner: postgres
--

CREATE POLICY consumer_view ON "ci-rt".git FOR SELECT TO consumer USING (((owner = ("current_user"())::text) OR (owner = 'consumer'::text)));


--
-- Name: histogram consumer_view; Type: POLICY; Schema: "ci-rt"; Owner: postgres
--

CREATE POLICY consumer_view ON "ci-rt".histogram FOR SELECT TO consumer USING (((owner = ("current_user"())::text) OR (owner = 'consumer'::text)));


--
-- Name: cirtscheduler consumer_view; Type: POLICY; Schema: "ci-rt"; Owner: postgres
--

CREATE POLICY consumer_view ON "ci-rt".cirtscheduler FOR SELECT TO consumer USING (((owner = ("current_user"())::text) OR (owner = 'consumer'::text)));


--
-- Name: cyclictest; Type: ROW SECURITY; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE "ci-rt".cyclictest ENABLE ROW LEVEL SECURITY;

--
-- Name: git; Type: ROW SECURITY; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE "ci-rt".git ENABLE ROW LEVEL SECURITY;

--
-- Name: histogram; Type: ROW SECURITY; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE "ci-rt".histogram ENABLE ROW LEVEL SECURITY;

--
-- Name: cirtscheduler jenkins_all; Type: POLICY; Schema: "ci-rt"; Owner: postgres
--

CREATE POLICY jenkins_all ON "ci-rt".cirtscheduler FOR ALL TO jenkins USING (true) WITH CHECK (true);


--
-- Name: cirtbranch jenkins_all; Type: POLICY; Schema: "ci-rt"; Owner: postgres
--

CREATE POLICY jenkins_all ON "ci-rt".cirtbranch FOR ALL TO jenkins USING (true) WITH CHECK (true);


--
-- Name: boottest jenkins_all; Type: POLICY; Schema: "ci-rt"; Owner: postgres
--

CREATE POLICY jenkins_all ON "ci-rt".boottest FOR ALL TO jenkins USING (true) WITH CHECK (true);


--
-- Name: compiletest jenkins_all; Type: POLICY; Schema: "ci-rt"; Owner: postgres
--

CREATE POLICY jenkins_all ON "ci-rt".compiletest FOR ALL TO jenkins USING (true) WITH CHECK (true);


--
-- Name: cyclictest jenkins_all; Type: POLICY; Schema: "ci-rt"; Owner: postgres
--

CREATE POLICY jenkins_all ON "ci-rt".cyclictest FOR ALL TO jenkins USING (true) WITH CHECK (true);


--
-- Name: git jenkins_all; Type: POLICY; Schema: "ci-rt"; Owner: postgres
--

CREATE POLICY jenkins_all ON "ci-rt".git FOR ALL TO jenkins USING (true) WITH CHECK (true);


--
-- Name: histogram jenkins_all; Type: POLICY; Schema: "ci-rt"; Owner: postgres
--

CREATE POLICY jenkins_all ON "ci-rt".histogram FOR ALL TO jenkins USING (true) WITH CHECK (true);


--
-- Name: minavgmax jenkins_all; Type: POLICY; Schema: "ci-rt"; Owner: postgres
--

CREATE POLICY jenkins_all ON "ci-rt".minavgmax FOR ALL TO jenkins USING (true) WITH CHECK (true);


--
-- Name: minavgmax; Type: ROW SECURITY; Schema: "ci-rt"; Owner: postgres
--

ALTER TABLE "ci-rt".minavgmax ENABLE ROW LEVEL SECURITY;

--
-- Name: SCHEMA "ci-rt"; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA "ci-rt" TO PUBLIC;


--
-- Name: TABLE boottest; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT ALL ON TABLE "ci-rt".boottest TO jenkins;


--
-- Name: COLUMN boottest.id; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(id) ON TABLE "ci-rt".boottest TO consumer;


--
-- Name: COLUMN boottest.cmdline; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(cmdline) ON TABLE "ci-rt".boottest TO consumer;


--
-- Name: COLUMN boottest.pass; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(pass) ON TABLE "ci-rt".boottest TO consumer;


--
-- Name: COLUMN boottest.compiletest_id; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(compiletest_id) ON TABLE "ci-rt".boottest TO consumer;


--
-- Name: COLUMN boottest.target_id; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(target_id) ON TABLE "ci-rt".boottest TO consumer;


--
-- Name: COLUMN boottest.bootdate; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(bootdate) ON TABLE "ci-rt".boottest TO consumer;


--
-- Name: SEQUENCE boottest_id_seq; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE "ci-rt".boottest_id_seq TO jenkins;


--
-- Name: TABLE compiletest; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT ALL ON TABLE "ci-rt".compiletest TO jenkins;


--
-- Name: COLUMN compiletest.id; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(id) ON TABLE "ci-rt".compiletest TO consumer;


--
-- Name: COLUMN compiletest.custom_commit; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(custom_commit) ON TABLE "ci-rt".compiletest TO consumer;


--
-- Name: COLUMN compiletest.defconfig; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(defconfig) ON TABLE "ci-rt".compiletest TO consumer;


--
-- Name: COLUMN compiletest."overlay"; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT("overlay") ON TABLE "ci-rt".compiletest TO consumer;


--
-- Name: COLUMN compiletest.pass; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(pass) ON TABLE "ci-rt".compiletest TO consumer;


--
-- Name: COLUMN compiletest.cirtscheduler_id; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(cirtscheduler_id) ON TABLE "ci-rt".compiletest TO consumer;


--
-- Name: COLUMN compiletest.configname; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(configname) ON TABLE "ci-rt".compiletest TO consumer;


--
-- Name: COLUMN compiletest.arch; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(arch) ON TABLE "ci-rt".compiletest TO consumer;


--
-- Name: COLUMN compiletest.buildcmd; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(buildcmd) ON TABLE "ci-rt".compiletest TO consumer;


--
-- Name: TABLE cirtbranch; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT ALL ON TABLE "ci-rt".cirtbranch TO jenkins;


--
-- Name: COLUMN cirtbranch.id; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(id) ON TABLE "ci-rt".cirtbranch TO consumer;


--
-- Name: COLUMN cirtbranch.testbranch; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(testbranch) ON TABLE "ci-rt".cirtbranch TO consumer;


--
-- Name: COLUMN cirtbranch.commit; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(commit) ON TABLE "ci-rt".cirtbranch TO consumer;


--
-- Name: COLUMN cirtbranch.cirtscheduler_id; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(cirtscheduler_id) ON TABLE "ci-rt".cirtbranch TO consumer;


--
-- Name: TABLE cirtscheduler; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT ALL ON TABLE "ci-rt".cirtscheduler TO jenkins;


--
-- Name: COLUMN cirtscheduler.id; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(id) ON TABLE "ci-rt".cirtscheduler TO consumer;


--
-- Name: COLUMN cirtscheduler.branch; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(branch) ON TABLE "ci-rt".cirtscheduler TO consumer;


--
-- Name: COLUMN cirtscheduler."timestamp"; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT("timestamp") ON TABLE "ci-rt".cirtscheduler TO consumer;


--
-- Name: COLUMN cirtscheduler.tags_id; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(tags_id) ON TABLE "ci-rt".cirtscheduler TO consumer;


--
-- Name: COLUMN cirtscheduler.pass; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(pass) ON TABLE "ci-rt".cirtscheduler TO consumer;


--
-- Name: COLUMN cirtscheduler.processing; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(processing) ON TABLE "ci-rt".cirtscheduler TO consumer;


--
-- Name: SEQUENCE cirtscheduler_id_seq; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE "ci-rt".cirtscheduler_id_seq TO jenkins;


--
-- Name: SEQUENCE compiletest_id_seq; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE "ci-rt".compiletest_id_seq TO jenkins;


--
-- Name: TABLE cyclictest; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT ALL ON TABLE "ci-rt".cyclictest TO jenkins;


--
-- Name: COLUMN cyclictest.id; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(id) ON TABLE "ci-rt".cyclictest TO consumer;


--
-- Name: COLUMN cyclictest.description; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(description) ON TABLE "ci-rt".cyclictest TO consumer;


--
-- Name: COLUMN cyclictest.duration; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(duration) ON TABLE "ci-rt".cyclictest TO consumer;


--
-- Name: COLUMN cyclictest."interval"; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT("interval") ON TABLE "ci-rt".cyclictest TO consumer;


--
-- Name: COLUMN cyclictest.min; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(min) ON TABLE "ci-rt".cyclictest TO consumer;


--
-- Name: COLUMN cyclictest.avg; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(avg) ON TABLE "ci-rt".cyclictest TO consumer;


--
-- Name: COLUMN cyclictest.max; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(max) ON TABLE "ci-rt".cyclictest TO consumer;


--
-- Name: COLUMN cyclictest.boottest_id; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(boottest_id) ON TABLE "ci-rt".cyclictest TO consumer;


--
-- Name: COLUMN cyclictest.pass; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(pass) ON TABLE "ci-rt".cyclictest TO consumer;


--
-- Name: COLUMN cyclictest.threshold; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(threshold) ON TABLE "ci-rt".cyclictest TO consumer;


--
-- Name: COLUMN cyclictest.testscript; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(testscript) ON TABLE "ci-rt".cyclictest TO consumer;


--
-- Name: COLUMN cyclictest.owner; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(owner) ON TABLE "ci-rt".cyclictest TO consumer;


--
-- Name: TABLE target; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT ALL ON TABLE "ci-rt".target TO jenkins;
GRANT SELECT ON TABLE "ci-rt".target TO consumer;


--
-- Name: TABLE cyc_target; Type: ACL; Schema: "ci-rt"; Owner: consumer
--

GRANT ALL ON TABLE "ci-rt".cyc_target TO jenkins;


--
-- Name: SEQUENCE cyclictest_id_seq; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE "ci-rt".cyclictest_id_seq TO jenkins;


--
-- Name: TABLE detail; Type: ACL; Schema: "ci-rt"; Owner: consumer
--

GRANT ALL ON TABLE "ci-rt".detail TO jenkins;


--
-- Name: TABLE git; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT ALL ON TABLE "ci-rt".git TO jenkins;


--
-- Name: COLUMN git.id; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(id) ON TABLE "ci-rt".git TO consumer;


--
-- Name: COLUMN git.path; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(path) ON TABLE "ci-rt".git TO consumer;


--
-- Name: COLUMN git.public; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT("public") ON TABLE "ci-rt".git TO consumer;


--
-- Name: COLUMN git.httprepo; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(httprepo) ON TABLE "ci-rt".git TO consumer;


--
-- Name: SEQUENCE git_id_seq; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE "ci-rt".git_id_seq TO jenkins;


--
-- Name: TABLE histogram; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT ALL ON TABLE "ci-rt".histogram TO jenkins;


--
-- Name: COLUMN histogram.id; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(id) ON TABLE "ci-rt".histogram TO consumer;


--
-- Name: COLUMN histogram.thread; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(thread) ON TABLE "ci-rt".histogram TO consumer;


--
-- Name: COLUMN histogram.latency; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(latency) ON TABLE "ci-rt".histogram TO consumer;


--
-- Name: COLUMN histogram.count; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(count) ON TABLE "ci-rt".histogram TO consumer;


--
-- Name: COLUMN histogram.cyclictest_id; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(cyclictest_id) ON TABLE "ci-rt".histogram TO consumer;


--
-- Name: SEQUENCE histogram_id_seq; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE "ci-rt".histogram_id_seq TO jenkins;


--
-- Name: TABLE label; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT ALL ON TABLE "ci-rt".label TO jenkins;
GRANT SELECT ON TABLE "ci-rt".label TO consumer;


--
-- Name: TABLE kbuild; Type: ACL; Schema: "ci-rt"; Owner: consumer
--

GRANT ALL ON TABLE "ci-rt".kbuild TO jenkins;


--
-- Name: SEQUENCE label_id_seq; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE "ci-rt".label_id_seq TO jenkins;


--
-- Name: TABLE minavgmax; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT ALL ON TABLE "ci-rt".minavgmax TO jenkins;


--
-- Name: COLUMN minavgmax.thread; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(thread) ON TABLE "ci-rt".minavgmax TO consumer;


--
-- Name: COLUMN minavgmax.cyclictest_id; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(cyclictest_id) ON TABLE "ci-rt".minavgmax TO consumer;


--
-- Name: COLUMN minavgmax.min; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(min) ON TABLE "ci-rt".minavgmax TO consumer;


--
-- Name: COLUMN minavgmax.avg; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(avg) ON TABLE "ci-rt".minavgmax TO consumer;


--
-- Name: COLUMN minavgmax.max; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT(max) ON TABLE "ci-rt".minavgmax TO consumer;


--
-- Name: TABLE tags; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT ALL ON TABLE "ci-rt".tags TO jenkins;
GRANT SELECT ON TABLE "ci-rt".tags TO consumer;


--
-- Name: TABLE overview; Type: ACL; Schema: "ci-rt"; Owner: consumer
--

GRANT ALL ON TABLE "ci-rt".overview TO jenkins;


--
-- Name: SEQUENCE tags_id_seq; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE "ci-rt".tags_id_seq TO jenkins;


--
-- Name: SEQUENCE target_id_seq; Type: ACL; Schema: "ci-rt"; Owner: postgres
--

GRANT SELECT,USAGE ON SEQUENCE "ci-rt".target_id_seq TO jenkins;


--
-- Name: TABLE targetboot; Type: ACL; Schema: "ci-rt"; Owner: consumer
--

GRANT ALL ON TABLE "ci-rt".targetboot TO jenkins;


--
-- Name: TABLE targets; Type: ACL; Schema: "ci-rt"; Owner: consumer
--

GRANT ALL ON TABLE "ci-rt".targets TO jenkins;


--
-- PostgreSQL database dump complete
--

--
-- Add mantatory data entries for CI-RT Jenkins
--

COPY "ci-rt".git (id, path, public, httprepo, owner) FROM stdin;
0	git path	f	http path	intern
\.

COPY "ci-rt".tags (id, git_id, commit, name) FROM stdin;
0	0	0	dummy
\.
